use std::type::*;


MyParentObj => struct {
    l : int
}


MyObj => struct<D>:MyParentObj {
        a : int,
        b : float,
    pub c : bool,
        d : D
};

MyTrait => trait<T : MyObj> {

    pub new => |value : float| T {
        return MyObj {
            a : 0,
            b : value,
            c : value == 0.0
        };
    };

    pub add => |self : &T, amount : int| {
        self.a += amount;
        self.c  = self.a.to_float() == self.b;
    };

    pub handle => |self : &T, d : D|;

};

impl MyTrait<T> for MyObj<D> {

    pub handle => |self : &T, d : D| {
        self.d = d;
    };

}


#[entry]
pub main => ||{
    obj => MyObj<bool>::new();
}
