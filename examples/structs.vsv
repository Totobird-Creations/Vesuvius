use std::{
    control = c,
    rand,
    io::stdout,
    type::*
};


let MyParentObj = struct {
    l : int
};


let MyObj = struct<D>:MyParentObj {
        a : int,
        b : float,
    pub c : bool,
        d : D
};

let MyTrait = trait<T : MyObj, D> {

    pub let new = |value : float, d : D| T {
        let obj = MyObj {
            a : 0,
            b : value,
            c : value == 0.0,
            d : d
        };
        obj << MyTraitImpl;
        ~obj;
    };

    pub let add = |self : &T, amount : int| {
        self.a = self.a + amount;
        self.c = self.a.to_float() == self.b;
    };

    pub let handle = |self : &T, d : D|;

};

let MyTraitImpl = impl MyObj<D> : MyTrait<T> {

    pub let handle = |self : &T, d : D| {
        self.d = d;
    };

};


#[entry]
pub let main = ||{
    let obj = MyObj<bool>::new();
    obj.add(1);
    obj.handle(true);
};
